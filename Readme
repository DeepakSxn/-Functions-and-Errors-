Solidity Calculator Contract

Simple Overview of Use/Purpose
This Solidity program is a basic calculator smart contract that demonstrates fundamental arithmetic operations and error-handling mechanisms. It is designed to serve as an introductory project for developers learning to build smart contracts on the Ethereum blockchain.

Description
The Solidity Calculator contract performs basic arithmetic operations such as addition, subtraction, and multiplication on integers. The contract includes error handling using Solidity's require, assert, and revert statements to ensure valid operations and maintain data integrity. This project provides a straightforward approach to understanding error handling in Solidity, serving as a foundation for more complex contract development.

Getting Started
Installing
To get started with this project, use Remix, an online IDE for Solidity. Remix allows you to write, compile, and deploy smart contracts directly in the browser without the need for local installation.

How/where to download your program:

No download is required. Access Remix IDE online at https://remix.ethereum.org.
Any modifications needed to be made to files/folders:

No modifications are necessary. You can copy the code directly into a new file within the Remix IDE.
Executing Program
How to run the program:

Open Remix IDE:

Visit https://remix.ethereum.org.
Create a New File:

Click on the "+" icon in the left-hand sidebar.
Save the file with a .sol extension (e.g., Calculator.sol).
Copy the Code:

Copy and paste the following code into the newly created file:
solidity
Copy code
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.9;

contract Calculator {
    int256 lastResult;

    function calculate(int256 num1, string memory operation, int256 num2) public returns (int256) {
        bytes memory op = bytes(operation);

        require(op.length == 1, "Invalid operation");
        int256 result;
        if (op[0] == '+') {
            result = num1 + num2;
            assert(result == num1 + num2);
        } else if (op[0] == '-') {
            result = num1 - num2;
            assert(result == num1 - num2);
        } else if (op[0] == '*') {
            result = num1 * num2;
            assert(result == num1 * num2);
        } else {  
            revert("Unsupported operation");
        }
        lastResult = result; 
        return result;
    }

    function getLastResult() public view returns (int256) {
        return lastResult;
    }
}
Compile the Code:

Click on the "Solidity Compiler" tab in the left-hand sidebar.
Ensure the compiler version is set to 0.8.9 or another compatible version.
Click on "Compile Calculator.sol."
Deploy the Contract:

Navigate to the "Deploy & Run Transactions" tab.
Select the "Calculator" contract from the dropdown menu.
Click on the "Deploy" button.
Interact with the Contract:

After deployment, interact with the contract by invoking the calculate or getLastResult functions.
Input values for num1, operation, and num2 when using the calculate function, and press "transact" to execute.
Use the getLastResult function to retrieve the last calculated result.
Help
Common Issues:

Ensure that the operation string (e.g., "+", "-", "*") is correctly formatted as a single character.
Make sure the Solidity compiler version is compatible with the code (>=0.8.9).
Command to run if the program contains helper info:

Remix IDE provides in-browser debugging and error messages to assist with common issues.
Authors
Contributor Name:

DeepakSxn
License
This project is licensed under the MIT License - see the LICENSE.md file for details.
